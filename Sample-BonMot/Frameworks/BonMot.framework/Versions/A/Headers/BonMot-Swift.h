// Generated by Apple Swift version 3.0.1 (swiftlang-800.0.58.6 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import AppKit;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface NSAttributedString (SWIFT_EXTENSION(BonMot))
@end


@interface NSAttributedString (SWIFT_EXTENSION(BonMot))
@end


@interface NSAttributedString (SWIFT_EXTENSION(BonMot))
@end


@interface NSAttributedString (SWIFT_EXTENSION(BonMot))
/**
  Create a copy of \code
  self
  \endcode, but replace characters in the \code
  Special
  \endcode
  enumeration, images, and unassigned unicode characters with a
  human-readable string.
*/
@property (nonatomic, readonly, strong) NSAttributedString * _Nonnull bonMotDebugAttributedString;
@property (nonatomic, readonly, copy) NSString * _Nonnull bonMotDebugString;
@end


@interface NSAttributedString (SWIFT_EXTENSION(BonMot))
@end


@interface NSFont (SWIFT_EXTENSION(BonMot))
@end


@interface NSFont (SWIFT_EXTENSION(BonMot))
/**
  Queries a font and returns its available OpenType features.
  note:
  features will report whether they are “Exclusive”. If a
  feature is exclusive, that means that you can use only one
  of its available options at a time. Otherwise, you can mix
  and match any combination of its options.
  \param includeIDs whether to include the integer values of the
  features’ type identifiers, which are
  integers, and pretty cryptic unless you know
  what you’re looking for.


  returns:
  A human-readable string representing the receiver’s
  available OpenType features.
*/
- (NSString * _Nonnull)availableFontFeaturesWithIncludeIdentifiers:(BOOL)includeIDs;
@end


@interface NSFont (SWIFT_EXTENSION(BonMot))
@end

@class NSColor;

@interface NSImage (SWIFT_EXTENSION(BonMot))
/**
  Returns a copy of the receiver where the alpha channel is maintained,
  but every pixel’s color is replaced with \code
  color
  \endcode.
  note:
  The returned image does <em>not</em> have the template flag set,
  preventing further tinting.
  \param theColor The color to use to tint the receiver.


  returns:
  A tinted copy of the image.
*/
- (NSImage * _Nonnull)bon_tintedImageWithColor:(NSColor * _Nonnull)theColor;
@end


@interface NSImage (SWIFT_EXTENSION(BonMot))
@end


@interface NSParagraphStyle (SWIFT_EXTENSION(BonMot))
@end


@interface NSParagraphStyle (SWIFT_EXTENSION(BonMot))
@end


@interface NSParagraphStyle (SWIFT_EXTENSION(BonMot))
@end


/**
  Stores styles, and allows them to be looked up by name. Used for supporting
  Interface builder and styling XML markup.
*/
SWIFT_CLASS_NAMED("NamedStyles")
@interface BONNamedStyles : NSObject
/**
  A shared repository of styles. It is used by the \code
  bonMotStyleName
  \endcode
  property in Interface Builder.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) BONNamedStyles * _Nonnull shared;)
+ (BONNamedStyles * _Nonnull)shared;
+ (void)setShared:(BONNamedStyles * _Nonnull)value;
/**
  Define a closure to be invoked when an unregistered style is requested.
  By default, an error is printed.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) void (^ _Nonnull unregisteredStyleClosure)(NSString * _Nonnull);)
+ (void (^ _Nonnull)(NSString * _Nonnull))unregisteredStyleClosure;
+ (void)setUnregisteredStyleClosure:(void (^ _Nonnull)(NSString * _Nonnull))value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

enum BONTextAlignmentConstraintAttribute : NSInteger;

/**
  Used to align various UI controls (anything with a font or attribute text)
  by properties that are not available with stock constraints:
  <ul>
    <li>
      cap height (the tops of capital letters)
    </li>
    <li>
      x-height (the height of a lowercase “x”)
    </li>
  </ul>
*/
SWIFT_CLASS_NAMED("TextAlignmentConstraint")
@interface BONTextAlignmentConstraint : NSLayoutConstraint
@property (nonatomic, copy) NSString * _Nullable firstAlignment;
@property (nonatomic, copy) NSString * _Nullable secondAlignment;
@property (nonatomic, readonly) enum BONTextAlignmentConstraintAttribute firstItemAttribute;
@property (nonatomic, readonly) enum BONTextAlignmentConstraintAttribute secondItemAttribute;
/**
  Construct a new \code
  TextAlignmentConstraint
  \endcode.
  \param view1 The view for the left side of the constraint equation.

  \param attr1 The attribute of the view for the left side of the constraint equation.

  \param relation The relationship between the left and right side of the constraint equation.

  \param view2 The view for the right side of the constraint equation.

  \param attr2 The attribute of the view for the right side of the constraint equation.


  returns:
  A constraint object relating the two provided views with the
  specified relation and attributes.
*/
+ (BONTextAlignmentConstraint * _Nonnull)withItem:(id _Nonnull)view1 attribute:(enum BONTextAlignmentConstraintAttribute)attr1 relatedBy:(NSLayoutRelation)relation toItem:(id _Nonnull)view2 attribute:(enum BONTextAlignmentConstraintAttribute)attr2;
- (void)awakeFromNib;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BONTextAlignmentConstraintAttribute, "Attribute") {
  BONTextAlignmentConstraintAttributeUnspecified = 0,
  BONTextAlignmentConstraintAttributeTop = 1,
  BONTextAlignmentConstraintAttributeCapHeight = 2,
  BONTextAlignmentConstraintAttributeXHeight = 3,
  BONTextAlignmentConstraintAttributeFirstBaseline = 4,
  BONTextAlignmentConstraintAttributeLastBaseline = 5,
  BONTextAlignmentConstraintAttributeBottom = 6,
};

#pragma clang diagnostic pop
